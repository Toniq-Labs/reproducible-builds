type User = 
 variant {
   address: AccountIdentifier;
   "principal": principal;
 };
type UpdateRequest = 
 record {
   assetID: nat;
   payload: File;
 };
type UpdateCallsAggregatedData = vec nat64;
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type Transaction = 
 record {
   buyer: AccountIdentifier__1;
   price: nat64;
   seller: principal;
   time: Time;
   token: TokenIdentifier__1;
 };
type TokenIndex = nat32;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Time = int;
type SubAccount__1 = vec nat8;
type SubAccount = vec nat8;
type Settlement = 
 record {
   buyer: AccountIdentifier__1;
   price: nat64;
   seller: principal;
   subaccount: SubAccount__1;
 };
type Result_7 = 
 variant {
   err: CommonError;
   ok: record {
         AccountIdentifier__1;
         opt Listing;
       };
 };
type Result_6 = 
 variant {
   err: CommonError;
   ok: text;
 };
type Result_5 = 
 variant {
   err: CommonError;
   ok: AccountIdentifier__1;
 };
type Result_4 = 
 variant {
   err: CommonError;
   ok: Metadata;
 };
type Result_3 = 
 variant {
   err: CommonError;
   ok;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type Result_1 = 
 variant {
   err: CommonError;
   ok: vec TokenIndex;
 };
type Result = 
 variant {
   err: CommonError;
   ok: vec record {
             TokenIndex;
             opt Listing;
             opt blob;
           };
 };
type PixelCollection = 
 service {
   acceptCycles: () -> ();
   addAsset: (Asset) -> (nat);
   add_license: (text, text) -> () oneway;
   allPayments: () -> (vec record {
                             principal;
                             vec SubAccount__1;
                           }) query;
   allSettlements: () -> (vec record {
                                TokenIndex;
                                Settlement;
                              }) query;
   availableCycles: () -> (nat) query;
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier__1) -> (Result_5) query;
   clearPayments: (principal, vec SubAccount__1) -> ();
   collectCanisterMetrics: () -> ();
   cronCapEvents: () -> ();
   cronDisbursements: () -> ();
   cronSettlements: () -> ();
   details: (TokenIdentifier__1) -> (Result_7) query;
   extensions: () -> (vec Extension) query;
   getCanisterLog: (opt CanisterLogRequest) ->
    (opt CanisterLogResponse) query;
   getCanisterMetrics: (GetMetricsParameters) -> (opt CanisterMetrics) query;
   getMinter: () -> (principal) query;
   getRegistry: () -> (vec record {
                             TokenIndex;
                             AccountIdentifier__1;
                           }) query;
   getTokens: () -> (vec record {
                           TokenIndex;
                           Metadata;
                         }) query;
   get_token_identifier: (TokenIndex) -> (TokenIdentifier__1) query;
   get_transaction_count: () -> (nat) query;
   heartbeat_external: () -> ();
   heartbeat_pending: () -> (vec record {
                                   text;
                                   nat;
                                 }) query;
   heartbeat_start: () -> ();
   heartbeat_stop: () -> ();
   historicExport: () -> (bool);
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_streaming_callback: (HttpStreamingCallbackToken) ->
    (HttpStreamingCallbackResponse) query;
   init: (text) -> (Result_3);
   isHeartbeatRunning: () -> (bool) query;
   lastbeat: () -> (int) query;
   license: (TokenIdentifier__1) -> (Result_6) query;
   list: (ListRequest) -> (Result_3);
   listings: () -> (vec record {
                          TokenIndex;
                          Listing;
                          Metadata;
                        }) query;
   lock: (TokenIdentifier__1, nat64, AccountIdentifier__1, SubAccount__1) ->
    (Result_5);
   map_license: (TokenIndex, text) -> () oneway;
   metadata: (TokenIdentifier__1) -> (Result_4) query;
   mintNFT: (MintingRequest) -> (TokenIndex);
   payments: () -> (opt vec SubAccount__1) query;
   pulse: () -> () oneway;
   setLogLevel: (nat8) -> ();
   setMinter: (principal) -> ();
   settle: (TokenIdentifier__1) -> (Result_3);
   settlements: () ->
    (vec record {
           TokenIndex;
           AccountIdentifier__1;
           nat64;
         }) query;
   startHeartbeat: () -> ();
   stats: () -> (nat64, nat64, nat64, nat64, nat, nat, nat) query;
   stopHeartbeat: () -> ();
   streamAsset: (nat, bool, blob) -> ();
   supply: (TokenIdentifier__1) -> (Result_2) query;
   tokens: (AccountIdentifier__1) -> (Result_1) query;
   tokens_ext: (AccountIdentifier__1) -> (Result) query;
   transactions: () -> (vec Transaction) query;
   transfer: (TransferRequest) -> (TransferResponse);
   updateAsset: (UpdateRequest) -> (nat);
   updateThumb: (text, File) -> (opt nat);
 };
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type Nanos = nat64;
type MintingRequest = 
 record {
   asset: nat32;
   to: AccountIdentifier__1;
 };
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type LogMessagesData = 
 record {
   message: text;
   timeNanos: Nanos;
 };
type Listing = 
 record {
   locked: opt Time;
   price: nat64;
   seller: principal;
 };
type ListRequest = 
 record {
   from_subaccount: opt SubAccount__1;
   price: opt nat64;
   token: TokenIdentifier__1;
 };
type HttpStreamingStrategy = variant {
                               Callback:
                                record {
                                  callback:
                                   func (HttpStreamingCallbackToken) ->
                                    (HttpStreamingCallbackResponse) query;
                                  token: HttpStreamingCallbackToken;
                                };};
type HttpStreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt blob;
 };
type HttpStreamingCallbackResponse = 
 record {
   body: blob;
   token: opt HttpStreamingCallbackToken;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt HttpStreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type GetLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   fromTimeNanos: opt Nanos;
 };
type GetLogMessagesFilter = 
 record {
   analyzeCount: nat32;
   messageContains: opt text;
   messageRegex: opt text;
 };
type GetLatestLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   upToTimeNanos: opt Nanos;
 };
type File = 
 record {
   ctype: text;
   data: vec blob;
 };
type Extension = text;
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterLogResponse = 
 variant {
   messages: CanisterLogMessages;
   messagesInfo: CanisterLogMessagesInfo;
 };
type CanisterLogRequest = 
 variant {
   getLatestMessages: GetLatestLogMessagesParameters;
   getMessages: GetLogMessagesParameters;
   getMessagesInfo;
 };
type CanisterLogMessagesInfo = 
 record {
   count: nat32;
   features: vec opt CanisterLogFeature;
   firstTimeNanos: opt Nanos;
   lastTimeNanos: opt Nanos;
 };
type CanisterLogMessages = 
 record {
   data: vec LogMessagesData;
   lastAnalyzedMessageTimeNanos: opt Nanos;
 };
type CanisterLogFeature = 
 variant {
   filterMessageByContains;
   filterMessageByRegex;
 };
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__1;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type Asset = 
 record {
   name: text;
   payload: File;
   thumbnail: opt File;
 };
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : () -> PixelCollection
